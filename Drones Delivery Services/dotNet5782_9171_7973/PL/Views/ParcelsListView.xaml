<UserControl x:Class="PL.Views.ParcelsListView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:local="clr-namespace:PL.Views"
             xmlns:vm="clr-namespace:PL.ViewModels"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             xmlns:converters="clr-namespace:PL.Views.Converters"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">

    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Style/StyleDictionary.xaml" />
                <ResourceDictionary Source="Style/ListDesign/TreeViewDictionary.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <converters:ValueToInputTypeConverter x:Key="ValueToInputTypeConverter" />
            <converters:ValueToInputEnableConverter x:Key="ValueToInputEnableConverter" />
            <converters:CamelCaseToReadableConverter x:Key="CamelCaseToReadableConverter" />

        </ResourceDictionary>
    </UserControl.Resources>

    <UserControl.DataContext>
        <vm:ParcelsListViewModel/>
    </UserControl.DataContext>

    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>

        <StackPanel Grid.Row="0" Style="{StaticResource QueryArea}">
            <!--Filter Key-->
            <syncfusion:SfTextInputLayout Hint="Filter By" InputViewPadding="10" Margin="30,20,30,0">
                <ComboBox ItemsSource="{Binding FilterOptions}" 
                          SelectedItem="{Binding FilterKey, UpdateSourceTrigger=PropertyChanged}">
                    <ComboBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type ComboBoxItem}">
                            <TextBlock Text="{Binding Name, Converter={StaticResource CamelCaseToReadableConverter}}" Tag="{Binding}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </syncfusion:SfTextInputLayout>

            <!--Dynamic Filter Value Input-->
            <local:Input IsEnabled="{Binding Parent.DataContext.FilterKey, 
                                             RelativeSource={RelativeSource Mode=Self}, 
                                             Converter={StaticResource ValueToInputEnableConverter}}"
                         Type="{Binding Parent.DataContext.FilterKey, 
                                        RelativeSource={RelativeSource Mode=Self}, 
                                        UpdateSourceTrigger=PropertyChanged, 
                                        Converter={StaticResource ValueToInputTypeConverter}}"
                         Command="{Binding Parent.DataContext.FilterCommand, 
                                           RelativeSource={RelativeSource Mode=Self}}"
                         ComboBoxItemsSourceEnumType="{Binding Parent.DataContext.FilterKey.PropertyType, 
                                                               RelativeSource={RelativeSource Mode=Self}}"/>


            <!--Sort key-->
            <syncfusion:SfTextInputLayout Hint="Sort By" InputViewPadding="10" >
                <ComboBox ItemsSource="{Binding SortOptions}" 
                          SelectedItem="{Binding SortKey, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding SortCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ComboBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type ComboBoxItem}">
                            <TextBlock Text="{Binding Converter={StaticResource CamelCaseToReadableConverter}}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </syncfusion:SfTextInputLayout>

            <!--Group Key-->
            <syncfusion:SfTextInputLayout Hint="Group By" InputViewPadding="10" >
                <ComboBox ItemsSource="{Binding GroupOptions}" 
                          SelectedItem="{Binding GroupKey, UpdateSourceTrigger=PropertyChanged}">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding GroupCommand}" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <ComboBox.ItemTemplate>
                        <DataTemplate DataType="{x:Type ComboBoxItem}">
                            <TextBlock Text="{Binding Converter={StaticResource CamelCaseToReadableConverter}}" />
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </syncfusion:SfTextInputLayout>
        </StackPanel>

        <!--List Area-->
        <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Auto" VerticalScrollBarVisibility="Auto">
            <TreeView ItemsSource="{Binding View}" Padding="10">
                <TreeView.GroupStyle>
                    <GroupStyle>
                        <GroupStyle.ContainerStyle>
                            <Style TargetType="{x:Type GroupItem}">
                                <Setter Property="Template" Value="{StaticResource TreeViewGroup}" />
                            </Style>
                        </GroupStyle.ContainerStyle>
                    </GroupStyle>
                </TreeView.GroupStyle>
            </TreeView>
        </ScrollViewer>

        <!--Add Button-->
        <StackPanel Grid.Row="2" Style="{StaticResource QueryArea}">
            <Button Command="{Binding OpenAddWindowCommand}" Margin="30,20">
                Add Parcel
            </Button>
        </StackPanel>

    </Grid>
</UserControl>

